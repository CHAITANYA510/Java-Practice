Interface?
The Interface is a medium to interact between user and system devices. For example, in our real life, if we consider the interface to be given as an example is the air condition, bike, ATM machine, etc. Similarly, in Java, Interface also plays the same role; it is considered as an interactive medium between the system and the end-user. However, the main aim of the interface in java is to achieve 100% abstraction by hiding actual implementation to the user and thus making applications a bit user-friendly. Therefore, it basically comprises of static, abstract, and final methods.

Example:


Abstraction?
Abstraction is one of the key concepts of object-oriented programming (OOP) languages. Its main goal is to handle complexity by hiding unnecessary details from the user. That enables the user to implement more complex logic on top of the provided abstraction without understanding or even thinking about all the hidden complexity.
That’s a very generic concept that’s not limited to object-oriented programming. You can find it everywhere in the real world.
Objects in an OOP language provide an abstraction that hides the internal implementation details, you just need to know which methods of the object are available to call and which input parameters are needed to trigger a specific operation. But you don’t need to understand how this method is implemented and which kinds of actions it has to perform to create the expected result.


=============

Questions
1. String and it method related, concat(), replace() 
- Yes, it work with String
- Yes, it returns new String, with concat, etc
2. Can we over ride main method? 
- No
3. Access modfifiers in packages? which is accessible and where?
- https://www.javatpoint.com/access-modifiers
4. How is map internally stored?

5. throw custom exception eg. if we encountered NPE, but we still has to throw IlleagalArgException how can we achieve this?
6. Difference between C & Java wrt Platform dependent? how can it be useful?
7. Why is C++ not platform independent?

Other Java topics
1. SQL? DML, DDL
2. Features of Java? Multithreading etc? Thread life cycle
3. Better example of abstraction, encapsulation? Why is it needed?
4. Spring, Spring Boot, Spring Cloud, Microservices, Hibernate? Dockers? 
5. String Argument? input?
6. test methods in Junit, modifier for same?
SuitClassAnnotation() -> method signature
Web services methods in servlet?
SOAP / REST
How are both transported? Transport Portion
String s1 has HashCode (long l), s1==null, After calling GC, what happens to code l1?
Spring @NamedQuery?
HTTP status 204
can final static method overrided?
POM Project Object Model, start tag?
Constructor (Private and public static, which is called?)
SQL - SUM, MAX
String, StringBUffer - Immutable
Mock obj in Junit
how to real XML file in Java
different view, same mapping?
Delete vs truncate vs drop

Other
Proxy server?


Coding:



Interview Questions
1. SQL, DDL, DML
2. Difference between Drop vs Truncate
3. How to enter lakhs of records into DB? Time constraints?
4. Keywords, Insert, update, CRUD in SQL
5. Indexing in table
6. Refpointer something in DB
7. How to store Password in DB? encryption?
8. Load testing, Stress testing?
9. Test plan, req docs?
10. How to upload data into database?
11. Security testing?
12. Flag to indicate accepted claim, in a table
13. How to point out 
14. If 40/50 TC are failed, what to do? How to analyse?
15. Why to hire you? If you leave after learning?
16. Checked & Unchecked exception

Improvement:
1. Why should I hire you if you don't have SQL skills?
Ans: I have a leaning attitude, hence my manager have allocated me to 4 different projects, as ky performance spoke for myself, I love to learn, hence  I can learn SQL as well, in short amount of time